const chatInput = document.querySelector("#chat-input");
const sendButton = document.querySelector("#send-btn");
const chatContainer = document.querySelector(".chat-container");
const themeButton = document.querySelector("#theme-btn");
const deleteButton = document.querySelector("#delete-btn");

let userText = null;
const API_KEY = "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"; // Paste your API key here


const loadDataFromLocalstorage = () => {
    // T·∫£i c√°c cu·ªôc tr√≤ chuy·ªán v√† ch·ªß ƒë·ªÅ ƒë√£ l∆∞u t·ª´ b·ªô nh·ªõ c·ª•c b·ªô v√† √°p d·ª•ng/th√™m tr√™n trang
    const themeColor = localStorage.getItem("themeColor");

    document.body.classList.toggle("light-mode", themeColor === "light_mode");
    themeButton.innerText = document.body.classList.contains("light-mode") ? "dark_mode" : "light_mode";

    const defaultText = `<div class="default-text">
                            <h1>Welcome to Chatdemo</h1>
                            <p>B·∫°n c√≥ th·ªÉ h·ªèi b·∫•t c·ª© c√¢u h·ªèi n√†o <br> Chatdemo s·∫Ω g·ª≠i th√¥ng tin ƒë·ªÉ h·ªó tr·ª£ b·∫°n B·∫°n h·∫øt m·ª©c c√≥ th·ªÉ üòÄ                        </div>`

    chatContainer.innerHTML = localStorage.getItem("all-chats") || defaultText;
    chatContainer.scrollTo(0, chatContainer.scrollHeight); // Cu·ªôn xu·ªëng cu·ªëi v√πng tr√≤ chuy·ªán
}

const createChatElement = (content, className) => {
    // T·∫°o div m·ªõi v√† √°p d·ª•ng tr√≤ chuy·ªán, l·ªõp ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√† ƒë·∫∑t n·ªôi dung html c·ªßa div
    const chatDiv = document.createElement("div");
    chatDiv.classList.add("chat", className);
    chatDiv.innerHTML = content;
    return chatDiv; // Return the created chat div
}

const getChatResponse = async (incomingChatDiv) => {
    const API_URL = "https://api.openai.com/v1/completions";
    const pElement = document.createElement("p");

    // X√°c ƒë·ªãnh c√°c thu·ªôc t√≠nh v√† d·ªØ li·ªáu cho y√™u c·∫ßu API
    const requestOptions = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${API_KEY}`
        },
        body: JSON.stringify({
            model: "gpt-3.5-turbo-instruct",
            prompt: userText,
            
            max_tokens: 2048,
            temperature: 0.1,
            n: 1,
            stop: null

            
        })
    }

    // G·ª≠i y√™u c·∫ßu POST t·ªõi API, nh·∫≠n ph·∫£n h·ªìi v√† ƒë·∫∑t ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng vƒÉn b·∫£n th√†nh ph·∫ßn ƒëo·∫°n vƒÉn
    try {
        const response = await (await fetch(API_URL, requestOptions)).json();
        pElement.textContent = response.choices[0].text.trim();
    } catch (error) { // Th√™m l·ªõp l·ªói v√†o th√†nh ph·∫ßn ƒëo·∫°n vƒÉn v√† ƒë·∫∑t vƒÉn b·∫£n l·ªói
        pElement.classList.add("error");
        pElement.textContent = "·ªêi! ƒê√£ x·∫£y ra l·ªói khi truy xu·∫•t ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.";
    }

    // X√≥a ho·∫°t ·∫£nh g√µ, n·ªëi th√™m th√†nh ph·∫ßn ƒëo·∫°n vƒÉn v√† l∆∞u cu·ªôc tr√≤ chuy·ªán v√†o b·ªô nh·ªõ c·ª•c b·ªô
    incomingChatDiv.querySelector(".typing-animation").remove();
    incomingChatDiv.querySelector(".chat-details").appendChild(pElement);
    localStorage.setItem("all-chats", chatContainer.innerHTML);
    chatContainer.scrollTo(0, chatContainer.scrollHeight);
}

const copyResponse = (copyBtn) => {
    // Sao ch√©p n·ªôi dung vƒÉn b·∫£n ph·∫£n h·ªìi v√†o clipboard
    const reponseTextElement = copyBtn.parentElement.querySelector("p");
    navigator.clipboard.writeText(reponseTextElement.textContent);
    copyBtn.textContent = "done";
    setTimeout(() => copyBtn.textContent = "content_copy", 1000);
}

const showTypingAnimation = () => {
    // Hi·ªÉn th·ªã ·∫£nh ƒë·ªông g√µ v√† g·ªçi h√†m getChatResponse
    const html = `<div class="chat-content">
                    <div class="chat-details">
                        <img src="images/chatbot.jpg" alt="chatbot-img">
                        <div class="typing-animation">
                            <div class="typing-dot" style="--delay: 0.2s"></div>
                            <div class="typing-dot" style="--delay: 0.3s"></div>
                            <div class="typing-dot" style="--delay: 0.4s"></div>
                        </div>
                    </div>
                    <span onclick="copyResponse(this)" class="material-symbols-rounded">content_copy</span>
                </div>`;
    // T·∫°o m·ªôt div tr√≤ chuy·ªán ƒë·∫øn b·∫±ng c√°ch nh·∫≠p ho·∫°t ·∫£nh v√† th√™m n√≥ v√†o v√πng ch·ª©a tr√≤ chuy·ªán
    const incomingChatDiv = createChatElement(html, "incoming");
    chatContainer.appendChild(incomingChatDiv);
    chatContainer.scrollTo(0, chatContainer.scrollHeight);
    getChatResponse(incomingChatDiv);
}

const handleOutgoingChat = () => {
    userText = chatInput.value.trim(); // Nh·∫≠n gi√° tr·ªã chatInput v√† x√≥a kho·∫£ng tr·∫Øng th·ª´a
    if(!userText) return; // N·∫øu chatInput tr·ªëng, h√£y quay l·∫°i t·ª´ ƒë√¢y

    // X√≥a tr∆∞·ªùng nh·∫≠p v√† ƒë·∫∑t l·∫°i chi·ªÅu cao c·ªßa n√≥
    chatInput.value = "";
    chatInput.style.height = `${initialInputHeight}px`;

    const html = `<div class="chat-content">
                    <div class="chat-details">
                        <img src="images/user.jpg" alt="user-img">
                        <p>${userText}</p>
                    </div>
                </div>`;

    // T·∫°o div tr√≤ chuy·ªán g·ª≠i ƒëi v·ªõi tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√† th√™m n√≥ v√†o v√πng ch·ª©a tr√≤ chuy·ªán
    const outgoingChatDiv = createChatElement(html, "outgoing");
    chatContainer.querySelector(".default-text")?.remove();
    chatContainer.appendChild(outgoingChatDiv);
    chatContainer.scrollTo(0, chatContainer.scrollHeight);
    setTimeout(showTypingAnimation, 500);
}

deleteButton.addEventListener("click", () => {
    // X√≥a c√°c cu·ªôc tr√≤ chuy·ªán kh·ªèi b·ªô nh·ªõ c·ª•c b·ªô v√† g·ªçi h√†m LoadDataFromLocalstorage
    if(confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ c√°c cu·ªôc tr√≤ chuy·ªán kh√¥ng?")) {
        localStorage.removeItem("all-chats");
        loadDataFromLocalstorage();
    }
});

themeButton.addEventListener("click", () => {
    // Chuy·ªÉn ƒë·ªïi l·ªõp c·ªßa n·ªôi dung cho ch·∫ø ƒë·ªô ch·ªß ƒë·ªÅ v√† l∆∞u ch·ªß ƒë·ªÅ ƒë√£ c·∫≠p nh·∫≠t v√†o b·ªô nh·ªõ c·ª•c b·ªô
    document.body.classList.toggle("light-mode");
    localStorage.setItem("themeColor", themeButton.innerText);
    themeButton.innerText = document.body.classList.contains("light-mode") ? "dark_mode" : "light_mode";
});

const initialInputHeight = chatInput.scrollHeight;

chatInput.addEventListener("input", () => {   
    // ƒêi·ªÅu ch·ªânh linh ho·∫°t chi·ªÅu cao c·ªßa tr∆∞·ªùng ƒë·∫ßu v√†o d·ª±a tr√™n n·ªôi dung c·ªßa n√≥
    chatInput.style.height =  `${initialInputHeight}px`;
    chatInput.style.height = `${chatInput.scrollHeight}px`;
});

chatInput.addEventListener("keydown", (e) => {
    // N·∫øu nh·∫•n ph√≠m Enter m√† kh√¥ng c√≥ Shift v√† chi·ªÅu r·ªông c·ª≠a s·ªï l·ªõn h∆°n
    // h∆°n 800 pixel, x·ª≠ l√Ω cu·ªôc tr√≤ chuy·ªán ƒëi
    if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 1000) {
        e.preventDefault();
        handleOutgoingChat();
    }
});

loadDataFromLocalstorage();
sendButton.addEventListener("click", handleOutgoingChat);